<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace chase_test_4\speakeasy_aPI;

class ApiEndpoints 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Delete an ApiEndpoint.
     * 
     * Delete an ApiEndpoint. This will also delete all associated Request Logs (if using a Postgres datastore).
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\DeleteApiEndpointRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\DeleteApiEndpointResponse
     */
	public function deleteApiEndpoint(
        ?\chase_test_4\speakeasy_aPI\Models\Operations\DeleteApiEndpointRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\DeleteApiEndpointResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}', \chase_test_4\speakeasy_aPI\Models\Operations\DeleteApiEndpointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\DeleteApiEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find an ApiEndpoint via its displayName.
     * 
     * Find an ApiEndpoint via its displayName (set by operationId from a registered OpenAPI schema).
     * This is useful for finding the ID of an ApiEndpoint to use in the /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID} endpoints.
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\FindApiEndpointRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\FindApiEndpointResponse
     */
	public function findApiEndpoint(
        ?\chase_test_4\speakeasy_aPI\Models\Operations\FindApiEndpointRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\FindApiEndpointResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/api_endpoints/find/{displayName}', \chase_test_4\speakeasy_aPI\Models\Operations\FindApiEndpointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\FindApiEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiEndpoint = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\ApiEndpoint', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate an OpenAPI specification for a particular ApiEndpoint.
     * 
     * This endpoint will generate a new operation in any registered OpenAPI document if the operation does not already exist in the document.
     * Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\GenerateOpenApiSpecForApiEndpointRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\GenerateOpenApiSpecForApiEndpointResponse
     */
	public function generateOpenApiSpecForApiEndpoint(
        ?\chase_test_4\speakeasy_aPI\Models\Operations\GenerateOpenApiSpecForApiEndpointRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\GenerateOpenApiSpecForApiEndpointResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/openapi', \chase_test_4\speakeasy_aPI\Models\Operations\GenerateOpenApiSpecForApiEndpointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\GenerateOpenApiSpecForApiEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateOpenApiSpecDiff = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\GenerateOpenApiSpecDiff', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a Postman collection for a particular ApiEndpoint.
     * 
     * Generates a postman collection that allows the endpoint to be called from postman variables produced for any path/query/header parameters included in the OpenAPI document.
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\GeneratePostmanCollectionForApiEndpointRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\GeneratePostmanCollectionForApiEndpointResponse
     */
	public function generatePostmanCollectionForApiEndpoint(
        ?\chase_test_4\speakeasy_aPI\Models\Operations\GeneratePostmanCollectionForApiEndpointRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\GeneratePostmanCollectionForApiEndpointResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/postman', \chase_test_4\speakeasy_aPI\Models\Operations\GeneratePostmanCollectionForApiEndpointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\GeneratePostmanCollectionForApiEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->postmanCollection = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all Api endpoints for a particular apiID.
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\GetAllApiEndpointsRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\GetAllApiEndpointsResponse
     */
	public function getAllApiEndpoints(
        ?\chase_test_4\speakeasy_aPI\Models\Operations\GetAllApiEndpointsRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\GetAllApiEndpointsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/api_endpoints', \chase_test_4\speakeasy_aPI\Models\Operations\GetAllApiEndpointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\GetAllApiEndpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiEndpoints = $serializer->deserialize((string)$httpResponse->getBody(), 'array<chase_test_4\speakeasy_aPI\Models\Shared\ApiEndpoint>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all ApiEndpoints for a particular apiID and versionID.
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\GetAllForVersionApiEndpointsRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\GetAllForVersionApiEndpointsResponse
     */
	public function getAllForVersionApiEndpoints(
        ?\chase_test_4\speakeasy_aPI\Models\Operations\GetAllForVersionApiEndpointsRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\GetAllForVersionApiEndpointsResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/api_endpoints', \chase_test_4\speakeasy_aPI\Models\Operations\GetAllForVersionApiEndpointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\GetAllForVersionApiEndpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiEndpoints = $serializer->deserialize((string)$httpResponse->getBody(), 'array<chase_test_4\speakeasy_aPI\Models\Shared\ApiEndpoint>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an ApiEndpoint.
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\GetApiEndpointRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\GetApiEndpointResponse
     */
	public function getApiEndpoint(
        ?\chase_test_4\speakeasy_aPI\Models\Operations\GetApiEndpointRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\GetApiEndpointResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}', \chase_test_4\speakeasy_aPI\Models\Operations\GetApiEndpointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\GetApiEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiEndpoint = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\ApiEndpoint', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upsert an ApiEndpoint.
     * 
     * Upsert an ApiEndpoint. If the ApiEndpoint does not exist it will be created, otherwise it will be updated.
     * 
     * @param \chase_test_4\speakeasy_aPI\Models\Operations\UpsertApiEndpointRequest $request
     * @return \chase_test_4\speakeasy_aPI\Models\Operations\UpsertApiEndpointResponse
     */
	public function upsertApiEndpoint(
        \chase_test_4\speakeasy_aPI\Models\Operations\UpsertApiEndpointRequest $request,
    ): \chase_test_4\speakeasy_aPI\Models\Operations\UpsertApiEndpointResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}', \chase_test_4\speakeasy_aPI\Models\Operations\UpsertApiEndpointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiEndpointInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \chase_test_4\speakeasy_aPI\Models\Operations\UpsertApiEndpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiEndpoint = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\ApiEndpoint', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'chase_test_4\speakeasy_aPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}